#include "simulation/satellite.hpp"
#include "simulation/math_obj.hpp"

#include "gtest/gtest.h"


TEST(SatelliteTest, DefaultConstructor) {
	using namespace orbsim;

	CartElem default_cart_elem{
		Vec3{7000, 0.000001, -0.001608},
		Vec3{0.000002, 1.310359, 7.431412}
	};

	Satellite sat;

	EXPECT_EQ(sat.get_cart_elem().pos, default_cart_elem.pos);
	EXPECT_EQ(sat.get_cart_elem().vel, default_cart_elem.vel);

	/* Conversion is hard to test because the values don't match the exact
	   ones generated by real software like GMAT (they are very close tho) */
	// EXPECT_DOUBLE_EQ(sat.get_kepl_elem().ecc, kepl_elem.ecc);
	// EXPECT_DOUBLE_EQ(sat.get_kepl_elem().sem_maj_ax, kepl_elem.sem_maj_ax);
	// EXPECT_DOUBLE_EQ(sat.get_kepl_elem().inc, kepl_elem.inc);
	// EXPECT_DOUBLE_EQ(sat.get_kepl_elem().ri_asc_node, kepl_elem.ri_asc_node);
	// EXPECT_DOUBLE_EQ(sat.get_kepl_elem().arg_of_per, kepl_elem.arg_of_per);
	// EXPECT_DOUBLE_EQ(sat.get_kepl_elem().true_anom, kepl_elem.true_anom);
}

TEST(SatelliteTest, CartesianConstructor) {
	using namespace orbsim;

	CartElem cart_elem{
		Vec3{7100, 0, 1300},
		Vec3{0, 7.35, 1}
	};

	Satellite sat(cart_elem);
	CartElem sat_cart_elem = sat.get_cart_elem();
	KeplElem sat_kepl_elem = sat.get_kepl_elem();

	EXPECT_EQ(sat.get_cart_elem().pos, cart_elem.pos);
	EXPECT_EQ(sat.get_cart_elem().vel, cart_elem.vel);

	/* Conversion is hard to test because the values don't match the exact
	   ones generated by real software like GMAT (they are very close tho) */
	// EXPECT_DOUBLE_EQ(sat.get_kepl_elem().ecc, kepl_elem.ecc);
	// EXPECT_DOUBLE_EQ(sat.get_kepl_elem().sem_maj_ax, kepl_elem.sem_maj_ax);
	// EXPECT_DOUBLE_EQ(sat.get_kepl_elem().inc, kepl_elem.inc);
	// EXPECT_DOUBLE_EQ(sat.get_kepl_elem().ri_asc_node, kepl_elem.ri_asc_node);
	// EXPECT_DOUBLE_EQ(sat.get_kepl_elem().arg_of_per, kepl_elem.arg_of_per);
	// EXPECT_DOUBLE_EQ(sat.get_kepl_elem().true_anom, kepl_elem.true_anom);
}

TEST(SatelliteTest, KeplerianConstructor) {
	using namespace orbsim;

	KeplElem kepl_elem{
		0.5,
		7500,
		0.1,
		0.2,
		0.3,
		1.5
	};

	Satellite sat(kepl_elem, "RK4", Earth, 0, 1000, 100);

	/* Conversion is hard to test because the values don't match the exact
	   ones generated by real software like GMAT (they are very close tho) */

	EXPECT_DOUBLE_EQ(sat.get_kepl_elem().ecc, kepl_elem.ecc);
	EXPECT_DOUBLE_EQ(sat.get_kepl_elem().sem_maj_ax, kepl_elem.sem_maj_ax);
	EXPECT_DOUBLE_EQ(sat.get_kepl_elem().inc, kepl_elem.inc);
	EXPECT_DOUBLE_EQ(sat.get_kepl_elem().ri_asc_node, kepl_elem.ri_asc_node);
	EXPECT_DOUBLE_EQ(sat.get_kepl_elem().arg_of_per, kepl_elem.arg_of_per);
	EXPECT_DOUBLE_EQ(sat.get_kepl_elem().true_anom, kepl_elem.true_anom);
}

TEST(SatelliteTest, CopyConstructor) {
	using namespace orbsim;

	CartElem cart_elem{
		Vec3{7100, 0, 1300},
		Vec3{0, 7.35, 1}
	};
	Satellite sat1(cart_elem);


	Satellite sat2(sat1);

	EXPECT_EQ(sat2.get_cart_elem().pos, sat1.get_cart_elem().pos);
	EXPECT_EQ(sat2.get_cart_elem().vel, sat1.get_cart_elem().vel);

	/* Conversion is hard to test because the values don't match the exact
	   ones generated by real software like GMAT (they are very close tho) */ 


	Satellite *sat3 = new Satellite(sat1);
	delete sat3;

	EXPECT_EQ(sat1.get_cart_elem().pos, cart_elem.pos);
	EXPECT_EQ(sat1.get_cart_elem().vel, cart_elem.vel);
}

TEST(SatelliteTest, Assignment) {
	using namespace orbsim;

	CartElem cart_elem{
		Vec3{7100, 0, 1300},
		Vec3{0, 7.35, 1}
	};
	Satellite sat1(cart_elem);
	
	
	Satellite sat2;
	sat2 = sat1;

	EXPECT_EQ(sat2.get_cart_elem().pos, cart_elem.pos);
	EXPECT_EQ(sat2.get_cart_elem().vel, cart_elem.vel);

	/* Conversion is hard to test because the values don't match the exact
	   ones generated by real software like GMAT (they are very close tho) */ 


	Satellite *sat3 = new Satellite();
	*sat3 = sat1;
	delete sat3;

	EXPECT_EQ(sat1.get_cart_elem().pos, cart_elem.pos);
	EXPECT_EQ(sat1.get_cart_elem().vel, cart_elem.vel);
}
